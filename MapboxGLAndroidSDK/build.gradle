apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply from: "${projectDir}/../gradle/dependencies.gradle"

dependencies {
    api dependenciesList.mapboxAndroidTelemetry
    api dependenciesList.mapboxAndroidCore
    api dependenciesList.mapboxJavaGeoJSON
    api dependenciesList.mapboxAndroidGestures
    api dependenciesList.mapboxAndroidAccounts

    if (!project.findProperty('buildFromSource')) {
        api dependenciesList.mapboxSdkCore
    } else {
        api dependenciesList.mapboxSdkCore
        api project(":MapboxGLAndroidSDKCore")
    }

    implementation dependenciesList.mapboxJavaTurf
    implementation dependenciesList.supportAnnotations
    implementation dependenciesList.supportFragmentV4
    implementation dependenciesList.interpolator
    implementation dependenciesList.okhttp3
    testImplementation dependenciesList.junit
    testImplementation dependenciesList.mockito
    testImplementation dependenciesList.mockk
    testImplementation dependenciesList.commonsIO
}

android {
    namespace 'com.mapbox.mapboxsdk'
    compileSdkVersion 33

    defaultConfig {
        minSdkVersion 23
        targetSdkVersion 28
        buildConfigField "String", "GIT_REVISION_SHORT", String.format("\"%s\"", getGitRevision())
        buildConfigField "String", "MAPBOX_SDK_IDENTIFIER", String.format("\"%s\"", "mapbox-maps-android")
        buildConfigField "String", "MAPBOX_SDK_VERSION", String.format("\"%s\"", project.VERSION_NAME)
        buildConfigField "String", "MAPBOX_VERSION_STRING", String.format("\"Mapbox/%s\"", project.VERSION_NAME)
        buildConfigField "String", "MAPBOX_EVENTS_USER_AGENT", String.format("\"mapbox-maps-android/%s\"", project.VERSION_NAME)
        consumerProguardFiles 'proguard-rules.pro'
        versionName "1.0"
    }

    // avoid naming conflicts, force usage of prefix
    resourcePrefix 'mapbox_'

    sourceSets {
        // limit amount of exposed library resources
        main.res.srcDirs += 'src/main/res-public'
    }
    buildFeatures {
        buildConfig = true
    }

    lintOptions {
        disable 'MissingTranslation', 'TypographyQuotes', 'ObsoleteLintCustomCheck', 'MissingPermission', 'WrongThreadInterprocedural'
        checkAllWarnings true
        warningsAsErrors false
    }

    testOptions {
        unitTests {
            returnDefaultValues true
        }
    }

    buildTypes {
        debug {
            jniDebuggable false
        }
    }
}


def static getGitRevision() {
    def cmd = "git rev-parse --short HEAD"
    def proc = cmd.execute()
    def ref = proc.text.trim()
    return ref
}

configurations {
    all*.exclude group: 'commons-logging', module: 'commons-logging'
    all*.exclude group: 'commons-collections', module: 'commons-collections'
}
